<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Pickleball Game Organizer</title>

    <style>

        * {

            margin: 0;

            padding: 0;

            box-sizing: border-box;

        }



        body {

            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

            min-height: 100vh;

            padding: 20px;

        }



        .container {

            max-width: 800px;

            margin: 0 auto;

            background: white;

            border-radius: 15px;

            box-shadow: 0 10px 30px rgba(0,0,0,0.2);

            overflow: hidden;

        }



        .header {

            background: linear-gradient(45deg, #2196F3, #21CBF3);

            color: white;

            padding: 30px;

            text-align: center;

        }



        .header h1 {

            font-size: 2.5em;

            margin-bottom: 10px;

        }



        .header p {

            font-size: 1.1em;

            opacity: 0.9;

        }



        .content {

            padding: 30px;

        }



        .game-setup {

            background: #f8f9fa;

            border-radius: 10px;

            padding: 25px;

            margin-bottom: 30px;

        }



        .form-group {

            margin-bottom: 20px;

        }



        label {

            display: block;

            margin-bottom: 8px;

            font-weight: 600;

            color: #333;

        }



        input, select, textarea {

            width: 100%;

            padding: 12px;

            border: 2px solid #ddd;

            border-radius: 8px;

            font-size: 16px;

            transition: border-color 0.3s;

        }



        input:focus, select:focus, textarea:focus {

            outline: none;

            border-color: #2196F3;

        }



        .form-row {

            display: grid;

            grid-template-columns: 1fr 1fr;

            gap: 20px;

        }



        .btn {

            background: linear-gradient(45deg, #2196F3, #21CBF3);

            color: white;

            border: none;

            padding: 15px 30px;

            border-radius: 8px;

            font-size: 16px;

            font-weight: 600;

            cursor: pointer;

            transition: transform 0.2s, box-shadow 0.2s;

        }



        .btn:hover {

            transform: translateY(-2px);

            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);

        }



        .btn-secondary {

            background: #6c757d;

        }



        .btn-success {

            background: #28a745;

        }



        .player-section {

            background: #fff;

            border: 2px solid #e9ecef;

            border-radius: 10px;

            padding: 25px;

            margin-bottom: 20px;

        }



        .player-grid {

            display: grid;

            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));

            gap: 15px;

            margin-bottom: 20px;

        }



        .player-slot {

            background: #f8f9fa;

            border: 2px dashed #dee2e6;

            border-radius: 8px;

            padding: 20px;

            text-align: center;

            transition: all 0.3s;

        }



        .player-slot.filled {

            background: #d4edda;

            border-color: #28a745;

            border-style: solid;

        }



        .player-slot.current-user {

            background: #cce5ff;

            border-color: #2196F3;

            border-style: solid;

        }



        .player-name {

            font-weight: 600;

            color: #333;

            margin-bottom: 5px;

        }



        .player-status {

            font-size: 14px;

            color: #666;

        }



        .join-form {

            background: #f8f9fa;

            border-radius: 8px;

            padding: 20px;

            margin-top: 20px;

        }



        .game-info {

            background: #e3f2fd;

            border-left: 4px solid #2196F3;

            padding: 20px;

            margin-bottom: 20px;

            border-radius: 0 8px 8px 0;

        }



        .share-section {

            background: #fff3cd;

            border: 1px solid #ffeaa7;

            border-radius: 8px;

            padding: 20px;

            margin-top: 20px;

        }



        .url-display {

            background: white;

            border: 1px solid #ddd;

            border-radius: 5px;

            padding: 10px;

            font-family: monospace;

            word-break: break-all;

            margin: 10px 0;

        }



        .status-indicator {

            display: inline-block;

            width: 12px;

            height: 12px;

            border-radius: 50%;

            margin-right: 8px;

        }



        .status-in { background: #28a745; }

        .status-out { background: #dc3545; }

        .status-maybe { background: #ffc107; }



        @media (max-width: 768px) {

            .form-row {

                grid-template-columns: 1fr;

            }

            

            .header h1 {

                font-size: 2em;

            }

            

            .content {

                padding: 20px;

            }

        }



        .notification {

            padding: 15px;

            border-radius: 8px;

            margin-bottom: 20px;

            display: none;

        }



        .notification.success {

            background: #d4edda;

            border: 1px solid #c3e6cb;

            color: #155724;

        }



        .notification.error {

            background: #f8d7da;

            border: 1px solid #f5c6cb;

            color: #721c24;

        }

    </style>

</head>

<body>

    <div class="container">

        <div class="header">

            <h1>üèì Pickleball Game Organizer</h1>

            <p>Organize games with your friends easily!</p>

        </div>



        <div class="content">

            <div id="notification" class="notification"></div>



            <!-- Game Setup Section (only shown to game creator) -->

            <div id="gameSetup" class="game-setup">

                <h2>Create New Game</h2>

                <form id="createGameForm">

                    <div class="form-row">

                        <div class="form-group">

                            <label for="gameDate">Date:</label>

                            <input type="date" id="gameDate" required>

                        </div>

                        <div class="form-group">

                            <label for="gameTime">Time:</label>

                            <input type="time" id="gameTime" required>

                        </div>

                    </div>

                    <div class="form-group">

                        <label for="location">Location:</label>

                        <input type="text" id="location" placeholder="e.g., Central Park Courts" required>

                    </div>

                    <div class="form-group">

                        <label for="maxPlayers">Max Players:</label>

                        <select id="maxPlayers">

                            <option value="4">4 Players (2v2)</option>

                            <option value="6">6 Players (3v3)</option>

                            <option value="8">8 Players (4v4)</option>

                        </select>

                    </div>

                    <div class="form-group">

                        <label for="notes">Additional Notes:</label>

                        <textarea id="notes" rows="3" placeholder="Skill level, equipment needed, etc."></textarea>

                    </div>

                    <div class="form-group">

                        <label for="creatorName">Your Name:</label>

                        <input type="text" id="creatorName" placeholder="Enter your name" required>

                    </div>

                    <button type="submit" class="btn">Create Game & Join</button>

                </form>

            </div>



            <!-- Game Display Section -->

            <div id="gameDisplay" style="display: none;">

                <div class="game-info">

                    <h2 id="gameTitle">Game Details</h2>

                    <div id="gameDetails"></div>

                </div>



                <div class="player-section">

                    <h3>Players (<span id="playerCount">0</span>/<span id="maxPlayerCount">4</span>)</h3>

                    <div id="playerGrid" class="player-grid"></div>



                    <div id="joinForm" class="join-form">

                        <h4>Join This Game</h4>

                        <div class="form-row">

                            <div class="form-group">

                                <label for="playerName">Your Name:</label>

                                <input type="text" id="playerName" placeholder="Enter your name">

                            </div>

                            <div class="form-group">

                                <label for="playerStatus">Status:</label>

                                <select id="playerStatus">

                                    <option value="in">‚úÖ I'm In!</option>

                                    <option value="maybe">ü§î Maybe</option>

                                    <option value="out">‚ùå Can't Make It</option>

                                </select>

                            </div>

                        </div>

                        <button type="button" onclick="joinGame()" class="btn">Update Status</button>

                    </div>

                </div>



                <div class="share-section">

                    <h4>üì± Share This Game</h4>

                    <p>Send this link to your friends:</p>

                    <div class="url-display" id="shareUrl"></div>

                    <button type="button" onclick="copyUrl()" class="btn btn-secondary">Copy Link</button>

                    <button type="button" onclick="shareViaText()" class="btn btn-success">Share via Text</button>

                </div>

            </div>

        </div>

    </div>



    <script>

        // Game data storage (in a real app, this would be a database)

        let gameData = {};



        // Initialize the app

        document.addEventListener('DOMContentLoaded', function() {

            // Set minimum date to today

            const today = new Date().toISOString().split('T')[0];

            document.getElementById('gameDate').min = today;

            document.getElementById('gameDate').value = today;



            // Check if there's a game ID in the URL

            const urlParams = new URLSearchParams(window.location.search);

            const gameId = urlParams.get('game');



            if (gameId) {

                loadGame(gameId);

            } else {

                showGameSetup();

            }



            // Handle form submission

            document.getElementById('createGameForm').addEventListener('submit', createGame);

        });



        function showGameSetup() {

            document.getElementById('gameSetup').style.display = 'block';

            document.getElementById('gameDisplay').style.display = 'none';

        }



        function createGame(e) {

            e.preventDefault();



            const gameId = generateGameId();

            const formData = new FormData(e.target);

            

            gameData = {

                id: gameId,

                date: document.getElementById('gameDate').value,

                time: document.getElementById('gameTime').value,

                location: document.getElementById('location').value,

                maxPlayers: parseInt(document.getElementById('maxPlayers').value),

                notes: document.getElementById('notes').value,

                creator: document.getElementById('creatorName').value,

                players: [],

                createdAt: new Date().toISOString()

            };



            // Add creator as first player

            gameData.players.push({

                name: gameData.creator,

                status: 'in',

                joinedAt: new Date().toISOString(),

                isCreator: true

            });



            // Save to localStorage (in a real app, save to database)

            localStorage.setItem(`game_${gameId}`, JSON.stringify(gameData));



            // Update URL and show game

            const newUrl = `${window.location.origin}${window.location.pathname}?game=${gameId}`;

            window.history.pushState({}, '', newUrl);



            showGame();

            showNotification('Game created successfully! Share the link with your friends.', 'success');

        }



        function loadGame(gameId) {

            // Load from localStorage (in a real app, load from database)

            const savedGame = localStorage.getItem(`game_${gameId}`);

            

            if (savedGame) {

                gameData = JSON.parse(savedGame);

                showGame();

            } else {

                showNotification('Game not found. Please check the link or create a new game.', 'error');

                showGameSetup();

            }

        }



        function showGame() {

            document.getElementById('gameSetup').style.display = 'none';

            document.getElementById('gameDisplay').style.display = 'block';



            // Update game details

            const gameDate = new Date(gameData.date + 'T' + gameData.time);

            const formattedDate = gameDate.toLocaleDateString('en-US', {

                weekday: 'long',

                year: 'numeric',

                month: 'long',

                day: 'numeric'

            });

            const formattedTime = gameDate.toLocaleTimeString('en-US', {

                hour: 'numeric',

                minute: '2-digit',

                hour12: true

            });



            document.getElementById('gameDetails').innerHTML = `

                <p><strong>üìÖ Date:</strong> ${formattedDate}</p>

                <p><strong>üïê Time:</strong> ${formattedTime}</p>

                <p><strong>üìç Location:</strong> ${gameData.location}</p>

                ${gameData.notes ? `<p><strong>üìù Notes:</strong> ${gameData.notes}</p>` : ''}

            `;



            updatePlayerDisplay();

            updateShareUrl();

        }



        function updatePlayerDisplay() {

            const playerGrid = document.getElementById('playerGrid');

            const playerCount = document.getElementById('playerCount');

            const maxPlayerCount = document.getElementById('maxPlayerCount');



            playerCount.textContent = gameData.players.filter(p => p.status === 'in').length;

            maxPlayerCount.textContent = gameData.maxPlayers;



            // Create player slots

            playerGrid.innerHTML = '';

            

            // Show confirmed players first

            const confirmedPlayers = gameData.players.filter(p => p.status === 'in');

            const maybeePlayers = gameData.players.filter(p => p.status === 'maybe');

            const outPlayers = gameData.players.filter(p => p.status === 'out');



            // Create slots for max players

            for (let i = 0; i < gameData.maxPlayers; i++) {

                const slot = document.createElement('div');

                slot.className = 'player-slot';



                if (i < confirmedPlayers.length) {

                    const player = confirmedPlayers[i];

                    slot.className += ' filled';

                    if (player.isCreator) slot.className += ' current-user';

                    slot.innerHTML = `

                        <div class="player-name">${player.name} ${player.isCreator ? 'üëë' : ''}</div>

                        <div class="player-status">

                            <span class="status-indicator status-in"></span>Confirmed

                        </div>

                    `;

                } else {

                    slot.innerHTML = `

                        <div class="player-name">Open Slot</div>

                        <div class="player-status">Waiting for player...</div>

                    `;

                }



                playerGrid.appendChild(slot);

            }



            // Show maybe and out players separately

            if (maybeePlayers.length > 0 || outPlayers.length > 0) {

                const otherPlayersDiv = document.createElement('div');

                otherPlayersDiv.innerHTML = '<h4 style="margin-top: 20px;">Other Responses:</h4>';

                

                [...maybeePlayers, ...outPlayers].forEach(player => {

                    const playerDiv = document.createElement('div');

                    playerDiv.style.cssText = 'display: flex; align-items: center; padding: 10px; margin: 5px 0; background: #f8f9fa; border-radius: 5px;';

                    

                    const statusClass = `status-${player.status}`;

                    const statusText = player.status === 'maybe' ? 'Maybe' : 'Can\'t make it';

                    const statusEmoji = player.status === 'maybe' ? 'ü§î' : '‚ùå';

                    

                    playerDiv.innerHTML = `

                        <span class="status-indicator ${statusClass}"></span>

                        <strong>${player.name}</strong> - ${statusEmoji} ${statusText}

                    `;

                    

                    otherPlayersDiv.appendChild(playerDiv);

                });

                

                playerGrid.appendChild(otherPlayersDiv);

            }

        }



        function joinGame() {

            const playerName = document.getElementById('playerName').value.trim();

            const playerStatus = document.getElementById('playerStatus').value;



            if (!playerName) {

                showNotification('Please enter your name.', 'error');

                return;

            }



            // Check if player already exists

            const existingPlayerIndex = gameData.players.findIndex(p => 

                p.name.toLowerCase() === playerName.toLowerCase()

            );



            if (existingPlayerIndex >= 0) {

                // Update existing player

                gameData.players[existingPlayerIndex].status = playerStatus;

                gameData.players[existingPlayerIndex].joinedAt = new Date().toISOString();

            } else {

                // Add new player

                gameData.players.push({

                    name: playerName,

                    status: playerStatus,

                    joinedAt: new Date().toISOString(),

                    isCreator: false

                });

            }



            // Save updated game data

            localStorage.setItem(`game_${gameData.id}`, JSON.stringify(gameData));



            updatePlayerDisplay();

            document.getElementById('playerName').value = '';

            

            const statusMessages = {

                'in': 'Great! You\'re confirmed for the game.',

                'maybe': 'Thanks for letting us know you might join.',

                'out': 'Thanks for the update. Maybe next time!'

            };

            

            showNotification(statusMessages[playerStatus], 'success');

        }



        function updateShareUrl() {

            const url = `${window.location.origin}${window.location.pathname}?game=${gameData.id}`;

            document.getElementById('shareUrl').textContent = url;

        }



        function copyUrl() {

            const url = document.getElementById('shareUrl').textContent;

            navigator.clipboard.writeText(url).then(() => {

                showNotification('Link copied to clipboard!', 'success');

            }).catch(() => {

                // Fallback for older browsers

                const textArea = document.createElement('textarea');

                textArea.value = url;

                document.body.appendChild(textArea);

                textArea.select();

                document.execCommand('copy');

                document.body.removeChild(textArea);

                showNotification('Link copied to clipboard!', 'success');

            });

        }



        function shareViaText() {

            const url = document.getElementById('shareUrl').textContent;

            const gameDate = new Date(gameData.date + 'T' + gameData.time);

            const formattedDate = gameDate.toLocaleDateString();

            const formattedTime = gameDate.toLocaleTimeString('en-US', {

                hour: 'numeric',

                minute: '2-digit',

                hour12: true

            });

            

            const message = `üèì Pickleball Game Invite!\n\nüìÖ ${formattedDate} at ${formattedTime}\nüìç ${gameData.location}\n\nJoin here: ${url}`;

            

            // Try to open default SMS app

            const smsUrl = `sms:?body=${encodeURIComponent(message)}`;

            window.open(smsUrl);

        }



        function generateGameId() {

            return Math.random().toString(36).substr(2, 9);

        }



        function showNotification(message, type) {

            const notification = document.getElementById('notification');

            notification.textContent = message;

            notification.className = `notification ${type}`;

            notification.style.display = 'block';



            setTimeout(() => {

                notification.style.display = 'none';

            }, 5000);

        }

    </script>

</body>

</html>
